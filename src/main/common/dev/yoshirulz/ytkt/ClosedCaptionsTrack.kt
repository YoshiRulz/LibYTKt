package dev.yoshirulz.ytkt

import io.ktor.client.HttpClient
import kotlinx.coroutines.coroutineScope

data class CCEntry(val text: String, val timespan: RelativeTimespan) {
	override fun toString() = text
}

data class CCTrackMetadata(val uri: URI, val lang: Language, val autoGenerated: Boolean) {
	override fun toString() = lang.toString()

	suspend fun getCaptions(httpClient: HttpClient): ClosedCaptionsTrack = coroutineScope {
		ClosedCaptionsTrack(
			uri.requestXMLProxied(httpClient, this)
				.receiveSingleOrElse { throw PageRequestFailureException() }
				.root
				.descendants("p")
				.associateWith { it.toString() }
				.filterNot { (_, s) -> s.isEmpty() }
				.map { (e, s) ->
					val startTime = e.attribute("t").toLong()
					CCEntry(s, RelativeTimestamp(startTime)..RelativeTimestamp(startTime + e.attribute("d").toLong()))
				}
		)
	}

	companion object {
		fun fromJSON(data: YTCCTrack): CCTrackMetadata = CCTrackMetadata(
			data.baseUrl.parseURI().copyAndSetParam("format", "3"),
			Language(data.languageCode, data.name.simpleText),
			data.vssId.startsWith("a.")
		)
	}
}

inline class ClosedCaptionsTrack(val captions: List<CCEntry>) {
	/** Gets caption displayed at the given point in time, or null if none is found */
	fun captionAt(time: RelativeTimestamp): CCEntry? = captions.firstOrNull { it.timespan.first <= time.ms }?.takeIf { time.ms <= it.timespan.last }
}

data class Language(/** ISO 639-1 code of this language */ val code: String, /** Full name of this language */ val name: String) {
	override fun toString() = "$code ($name)"
}
